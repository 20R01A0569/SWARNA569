WEEK-7
#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h"
#include "DHT.h"
#define DHTPIN D5
#define DHTTYPE DHT11
DHT dht(DHTPIN,DHTTYPE);
char ssid[] = SECRET_SSID;  
char pass[] = SECRET_PASS;  
int keyIndex = 0;      
WiFiClient  client;
unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;
float temp = 0,h=0;
void setup() {
  Serial.begin(115200);  
  while (!Serial) {
    ;
  }
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);
  dht.begin();
}
void loop() {
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);  
      Serial.print(".");
      delay(5000);    
    }
    Serial.println("\nConnected.");
  }
  temp=dht.readTemperature();
  Serial.println(F("Temperature: "));
  Serial.println(temp);
  h=dht.readHumidity();
  Serial.println(F("Humidity: "));
  Serial.println(h);
  ThingSpeak.setField(1,temp);
   ThingSpeak.setField(2, h);
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
//  int x = ThingSpeak.writeField(myChannelNumber, 1, temp, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  delay(2000);
}
WEEK-8
#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h" 
char ssid[] = SECRET_SSID;   // your network SSID (name)
char pass[] = SECRET_PASS;   // your network password
int keyIndex = 0;            // your network key Index number (needed only for WEP)
WiFiClient  client;
int statusCode = 0;
int field[2] = {1,2};
float hum,temp;
void setup() {
  Serial.begin(115200);      // Initialize serial
  while (!Serial) {
    ; 
  }
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);  // Initialize ThingSpeak
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass); 
      Serial.print(".");
      delay(5000);    
    }
    Serial.println("\nConnected");
  }
}
void loop() {
    statusCode = ThingSpeak.readMultipleFields(SECRET_CH_ID,SECRET_READ_APIKEY);
    if(statusCode == 200)
    {
      temp  = ThingSpeak.getFieldAsInt(field[0]); // Field 1
      hum = ThingSpeak.getFieldAsFloat(field[1]); // Field 2 
    }
    else{
      Serial.println("Problem reading channel. HTTP error code " + String(statusCode));
    }
    Serial.println();
    delay(5000); // no need to fetch too often
      Serial.print("Temperature: ");
      Serial.print(temp);
      Serial.print("  Humidity: ");
      Serial.print(hum);
}
SECRETS:
#define SECRET_SSID "Paisal Kati Vaduko" // replace MySSID with your WiFi network name
#define SECRET_PASS "dhoni123" // replace MyPassword with your WiFi password
#define SECRET_CH_ID  2062878
#define SECRET_READ_APIKEY "I1C84AIK4KY9UW12"

WEEK-9
#include "ESP8266WiFi.h"
#include "DHT.h"
#define DHTTYPE DHT11
const char* ssid = "iQOO";
const char* password = "bhanu007";
WiFiServer wifiServer(9000);
DHT dht(D5,DHT11);
void setup() {
  Serial.begin(115200);
  delay(1000);
  WiFi.begin(ssid,password);
  while (WiFi.status() !=WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting..");
  }
  Serial.print("Connected to WiFi. IP:");
  Serial.println(WiFi.localIP());
  wifiServer.begin();
  dht.begin();
}
void loop(){
  WiFiClient client = wifiServer.available();
  if(client){
    while (client.connected()){
      while(client.available()>0){
        int h = dht.readHumidity();
        client.print("Humidity");
        client.println(h);
        delay(2000);
      }
    }
    client.stop();
    Serial.println("Client disconnected");
  }
}
WEEK-10
#include<ESP8266WiFi.h>
#include<WiFiUDP.h>
#define WIFI_SSID "Sochna bhi mat!"
#define WIFI_PASS "paatolee"
#define UDP_PORT 9500
WiFiUDP UDP;
char packet[255];
char reply[]="Packet recieved successfully!";
void setup() {
  Serial.begin(115200);
  Serial.println();
  WiFi.begin(WIFI_SSID,WIFI_PASS);
  Serial.print("Connecting to ");
  Serial.print(WIFI_SSID);
  while(WiFi.status() != WL_CONNECTED)
  {
    delay(100);
    Serial.print(".");
  }   
  Serial.println();
  Serial.print("Connected! IP Address: ");
  Serial.println(WiFi.localIP());
  UDP.begin(UDP_PORT);
  Serial.print("Listening on UDP Port ");
  Serial.println(UDP_PORT);
}
void loop() {
  int packetSize = UDP.parsePacket();
  if(packetSize)
  {
    Serial.print("Recieved packet! Size: ");
    Serial.println(packetSize);
    int len = UDP.read(packet,255);
    if(len>0)
    {
      packet[len]='\0';
    }
    Serial.print("Packet recieved: ");
    Serial.println(packet);
    UDP.beginPacket(UDP.remoteIP(),UDP.remotePort());
    UDP.write(reply);
    UDP.endPacket();
  }
}

